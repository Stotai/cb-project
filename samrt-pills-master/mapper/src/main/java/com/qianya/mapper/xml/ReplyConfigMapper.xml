<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qianya.mapper.ReplyConfigMapper">
  <resultMap id="BaseResultMap" type="com.qianya.entity.ReplyConfig">
    <id column="config_id" jdbcType="INTEGER" property="configId" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="exrise_user_type" jdbcType="INTEGER" property="exriseUserType" />
    <result column="exrise_user_ids" jdbcType="VARCHAR" property="exriseUserIds" />
    <result column="crony_stauts" jdbcType="INTEGER" property="cronyStauts" />
    <result column="group_status" jdbcType="INTEGER" property="groupStatus" />
    <result column="reply_frequency" jdbcType="INTEGER" property="replyFrequency" />
    <result column="keywords_status" jdbcType="INTEGER" property="keywordsStatus" />
    <result column="eq_keywords" jdbcType="VARCHAR" property="eqKeywords" />
    <result column="keywords" jdbcType="VARCHAR" property="keywords" />
    <result column="trigger_type" jdbcType="VARCHAR" property="triggerType" />
    <result column="is_del" jdbcType="INTEGER" property="isDel" />
    <result column="sort" jdbcType="INTEGER" property="sort" />
    <result column="create_time" jdbcType="VARCHAR" property="createTime" />
    <result column="crony_group_self_stauts" jdbcType="INTEGER" property="cronyGroupSelfStauts" />
    <result column="reply_type" jdbcType="INTEGER" property="replyType" />
    <result column="reply_content" jdbcType="VARCHAR" property="replyContent" />
    <result column="reply_status" jdbcType="INTEGER" property="replyStatus" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    config_id, user_id, exrise_user_type, exrise_user_ids, crony_stauts, group_status, 
    reply_frequency, keywords_status, eq_keywords, keywords, trigger_type, is_del, sort, 
    create_time, crony_group_self_stauts, reply_type, reply_content, reply_status
  </sql>
  <select id="selectByExample" parameterType="com.qianya.entity.ReplyConfigCriteria" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from reply_config
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limitStart != null and limitStart >= 0">
      limit #{limitStart} , #{limitEnd}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from reply_config
    where config_id = #{configId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from reply_config
    where config_id = #{configId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.qianya.entity.ReplyConfigCriteria">
    delete from reply_config
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.qianya.entity.ReplyConfig">
    insert into reply_config (config_id, user_id, exrise_user_type, 
      exrise_user_ids, crony_stauts, group_status, 
      reply_frequency, keywords_status, eq_keywords, 
      keywords, trigger_type, is_del, 
      sort, create_time, crony_group_self_stauts, 
      reply_type, reply_content, reply_status
      )
    values (#{configId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{exriseUserType,jdbcType=INTEGER}, 
      #{exriseUserIds,jdbcType=VARCHAR}, #{cronyStauts,jdbcType=INTEGER}, #{groupStatus,jdbcType=INTEGER}, 
      #{replyFrequency,jdbcType=INTEGER}, #{keywordsStatus,jdbcType=INTEGER}, #{eqKeywords,jdbcType=VARCHAR}, 
      #{keywords,jdbcType=VARCHAR}, #{triggerType,jdbcType=VARCHAR}, #{isDel,jdbcType=INTEGER}, 
      #{sort,jdbcType=INTEGER}, #{createTime,jdbcType=VARCHAR}, #{cronyGroupSelfStauts,jdbcType=INTEGER}, 
      #{replyType,jdbcType=INTEGER}, #{replyContent,jdbcType=VARCHAR}, #{replyStatus,jdbcType=INTEGER}
      )
    <selectKey keyProperty="configId" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
  </insert>
  <insert id="insertSelective" parameterType="com.qianya.entity.ReplyConfig">
    insert into reply_config
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="configId != null">
        config_id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="exriseUserType != null">
        exrise_user_type,
      </if>
      <if test="exriseUserIds != null">
        exrise_user_ids,
      </if>
      <if test="cronyStauts != null">
        crony_stauts,
      </if>
      <if test="groupStatus != null">
        group_status,
      </if>
      <if test="replyFrequency != null">
        reply_frequency,
      </if>
      <if test="keywordsStatus != null">
        keywords_status,
      </if>
      <if test="eqKeywords != null">
        eq_keywords,
      </if>
      <if test="keywords != null">
        keywords,
      </if>
      <if test="triggerType != null">
        trigger_type,
      </if>
      <if test="isDel != null">
        is_del,
      </if>
      <if test="sort != null">
        sort,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="cronyGroupSelfStauts != null">
        crony_group_self_stauts,
      </if>
      <if test="replyType != null">
        reply_type,
      </if>
      <if test="replyContent != null">
        reply_content,
      </if>
      <if test="replyStatus != null">
        reply_status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="configId != null">
        #{configId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="exriseUserType != null">
        #{exriseUserType,jdbcType=INTEGER},
      </if>
      <if test="exriseUserIds != null">
        #{exriseUserIds,jdbcType=VARCHAR},
      </if>
      <if test="cronyStauts != null">
        #{cronyStauts,jdbcType=INTEGER},
      </if>
      <if test="groupStatus != null">
        #{groupStatus,jdbcType=INTEGER},
      </if>
      <if test="replyFrequency != null">
        #{replyFrequency,jdbcType=INTEGER},
      </if>
      <if test="keywordsStatus != null">
        #{keywordsStatus,jdbcType=INTEGER},
      </if>
      <if test="eqKeywords != null">
        #{eqKeywords,jdbcType=VARCHAR},
      </if>
      <if test="keywords != null">
        #{keywords,jdbcType=VARCHAR},
      </if>
      <if test="triggerType != null">
        #{triggerType,jdbcType=VARCHAR},
      </if>
      <if test="isDel != null">
        #{isDel,jdbcType=INTEGER},
      </if>
      <if test="sort != null">
        #{sort,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=VARCHAR},
      </if>
      <if test="cronyGroupSelfStauts != null">
        #{cronyGroupSelfStauts,jdbcType=INTEGER},
      </if>
      <if test="replyType != null">
        #{replyType,jdbcType=INTEGER},
      </if>
      <if test="replyContent != null">
        #{replyContent,jdbcType=VARCHAR},
      </if>
      <if test="replyStatus != null">
        #{replyStatus,jdbcType=INTEGER},
      </if>
    </trim>
    <selectKey keyProperty="configId" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
  </insert>
  <select id="countByExample" parameterType="com.qianya.entity.ReplyConfigCriteria" resultType="java.lang.Long">
    select count(*) from reply_config
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update reply_config
    <set>
      <if test="record.configId != null">
        config_id = #{record.configId,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.exriseUserType != null">
        exrise_user_type = #{record.exriseUserType,jdbcType=INTEGER},
      </if>
      <if test="record.exriseUserIds != null">
        exrise_user_ids = #{record.exriseUserIds,jdbcType=VARCHAR},
      </if>
      <if test="record.cronyStauts != null">
        crony_stauts = #{record.cronyStauts,jdbcType=INTEGER},
      </if>
      <if test="record.groupStatus != null">
        group_status = #{record.groupStatus,jdbcType=INTEGER},
      </if>
      <if test="record.replyFrequency != null">
        reply_frequency = #{record.replyFrequency,jdbcType=INTEGER},
      </if>
      <if test="record.keywordsStatus != null">
        keywords_status = #{record.keywordsStatus,jdbcType=INTEGER},
      </if>
      <if test="record.eqKeywords != null">
        eq_keywords = #{record.eqKeywords,jdbcType=VARCHAR},
      </if>
      <if test="record.keywords != null">
        keywords = #{record.keywords,jdbcType=VARCHAR},
      </if>
      <if test="record.triggerType != null">
        trigger_type = #{record.triggerType,jdbcType=VARCHAR},
      </if>
      <if test="record.isDel != null">
        is_del = #{record.isDel,jdbcType=INTEGER},
      </if>
      <if test="record.sort != null">
        sort = #{record.sort,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=VARCHAR},
      </if>
      <if test="record.cronyGroupSelfStauts != null">
        crony_group_self_stauts = #{record.cronyGroupSelfStauts,jdbcType=INTEGER},
      </if>
      <if test="record.replyType != null">
        reply_type = #{record.replyType,jdbcType=INTEGER},
      </if>
      <if test="record.replyContent != null">
        reply_content = #{record.replyContent,jdbcType=VARCHAR},
      </if>
      <if test="record.replyStatus != null">
        reply_status = #{record.replyStatus,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update reply_config
    set config_id = #{record.configId,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER},
      exrise_user_type = #{record.exriseUserType,jdbcType=INTEGER},
      exrise_user_ids = #{record.exriseUserIds,jdbcType=VARCHAR},
      crony_stauts = #{record.cronyStauts,jdbcType=INTEGER},
      group_status = #{record.groupStatus,jdbcType=INTEGER},
      reply_frequency = #{record.replyFrequency,jdbcType=INTEGER},
      keywords_status = #{record.keywordsStatus,jdbcType=INTEGER},
      eq_keywords = #{record.eqKeywords,jdbcType=VARCHAR},
      keywords = #{record.keywords,jdbcType=VARCHAR},
      trigger_type = #{record.triggerType,jdbcType=VARCHAR},
      is_del = #{record.isDel,jdbcType=INTEGER},
      sort = #{record.sort,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=VARCHAR},
      crony_group_self_stauts = #{record.cronyGroupSelfStauts,jdbcType=INTEGER},
      reply_type = #{record.replyType,jdbcType=INTEGER},
      reply_content = #{record.replyContent,jdbcType=VARCHAR},
      reply_status = #{record.replyStatus,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.qianya.entity.ReplyConfig">
    update reply_config
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="exriseUserType != null">
        exrise_user_type = #{exriseUserType,jdbcType=INTEGER},
      </if>
      <if test="exriseUserIds != null">
        exrise_user_ids = #{exriseUserIds,jdbcType=VARCHAR},
      </if>
      <if test="cronyStauts != null">
        crony_stauts = #{cronyStauts,jdbcType=INTEGER},
      </if>
      <if test="groupStatus != null">
        group_status = #{groupStatus,jdbcType=INTEGER},
      </if>
      <if test="replyFrequency != null">
        reply_frequency = #{replyFrequency,jdbcType=INTEGER},
      </if>
      <if test="keywordsStatus != null">
        keywords_status = #{keywordsStatus,jdbcType=INTEGER},
      </if>
      <if test="eqKeywords != null">
        eq_keywords = #{eqKeywords,jdbcType=VARCHAR},
      </if>
      <if test="keywords != null">
        keywords = #{keywords,jdbcType=VARCHAR},
      </if>
      <if test="triggerType != null">
        trigger_type = #{triggerType,jdbcType=VARCHAR},
      </if>
      <if test="isDel != null">
        is_del = #{isDel,jdbcType=INTEGER},
      </if>
      <if test="sort != null">
        sort = #{sort,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=VARCHAR},
      </if>
      <if test="cronyGroupSelfStauts != null">
        crony_group_self_stauts = #{cronyGroupSelfStauts,jdbcType=INTEGER},
      </if>
      <if test="replyType != null">
        reply_type = #{replyType,jdbcType=INTEGER},
      </if>
      <if test="replyContent != null">
        reply_content = #{replyContent,jdbcType=VARCHAR},
      </if>
      <if test="replyStatus != null">
        reply_status = #{replyStatus,jdbcType=INTEGER},
      </if>
    </set>
    where config_id = #{configId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.qianya.entity.ReplyConfig">
    update reply_config
    set user_id = #{userId,jdbcType=INTEGER},
      exrise_user_type = #{exriseUserType,jdbcType=INTEGER},
      exrise_user_ids = #{exriseUserIds,jdbcType=VARCHAR},
      crony_stauts = #{cronyStauts,jdbcType=INTEGER},
      group_status = #{groupStatus,jdbcType=INTEGER},
      reply_frequency = #{replyFrequency,jdbcType=INTEGER},
      keywords_status = #{keywordsStatus,jdbcType=INTEGER},
      eq_keywords = #{eqKeywords,jdbcType=VARCHAR},
      keywords = #{keywords,jdbcType=VARCHAR},
      trigger_type = #{triggerType,jdbcType=VARCHAR},
      is_del = #{isDel,jdbcType=INTEGER},
      sort = #{sort,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=VARCHAR},
      crony_group_self_stauts = #{cronyGroupSelfStauts,jdbcType=INTEGER},
      reply_type = #{replyType,jdbcType=INTEGER},
      reply_content = #{replyContent,jdbcType=VARCHAR},
      reply_status = #{replyStatus,jdbcType=INTEGER}
    where config_id = #{configId,jdbcType=INTEGER}
  </update>
  <insert id="insertBatch">
    insert into reply_config ( 
    config_id,
    user_id,
    exrise_user_type,
    exrise_user_ids,
    crony_stauts,
    group_status,
    reply_frequency,
    keywords_status,
    eq_keywords,
    keywords,
    trigger_type,
    is_del,
    sort,
    create_time,
    crony_group_self_stauts,
    reply_type,
    reply_content,
    reply_status
     ) values 
    <foreach collection="recordColl" item="record" separator=",">
      (
      <trim suffixOverrides=",">
         #{record.configId,jdbcType=INTEGER}, 
         #{record.userId,jdbcType=INTEGER}, 
         #{record.exriseUserType,jdbcType=INTEGER}, 
         #{record.exriseUserIds,jdbcType=VARCHAR}, 
         #{record.cronyStauts,jdbcType=INTEGER}, 
         #{record.groupStatus,jdbcType=INTEGER}, 
         #{record.replyFrequency,jdbcType=INTEGER}, 
         #{record.keywordsStatus,jdbcType=INTEGER}, 
         #{record.eqKeywords,jdbcType=VARCHAR}, 
         #{record.keywords,jdbcType=VARCHAR}, 
         #{record.triggerType,jdbcType=VARCHAR}, 
         #{record.isDel,jdbcType=INTEGER}, 
         #{record.sort,jdbcType=INTEGER}, 
         #{record.createTime,jdbcType=VARCHAR}, 
         #{record.cronyGroupSelfStauts,jdbcType=INTEGER}, 
         #{record.replyType,jdbcType=INTEGER}, 
         #{record.replyContent,jdbcType=VARCHAR}, 
         #{record.replyStatus,jdbcType=INTEGER}, 
      </trim>
      )
    </foreach>
  </insert>
  <insert id="insertBatchSel">
    insert into reply_config ( 
    <trim suffixOverrides=",">
      <if test="recordColl[0].configId != null">
        config_id,
      </if>
      <if test="recordColl[0].userId != null">
        user_id,
      </if>
      <if test="recordColl[0].exriseUserType != null">
        exrise_user_type,
      </if>
      <if test="recordColl[0].exriseUserIds != null">
        exrise_user_ids,
      </if>
      <if test="recordColl[0].cronyStauts != null">
        crony_stauts,
      </if>
      <if test="recordColl[0].groupStatus != null">
        group_status,
      </if>
      <if test="recordColl[0].replyFrequency != null">
        reply_frequency,
      </if>
      <if test="recordColl[0].keywordsStatus != null">
        keywords_status,
      </if>
      <if test="recordColl[0].eqKeywords != null">
        eq_keywords,
      </if>
      <if test="recordColl[0].keywords != null">
        keywords,
      </if>
      <if test="recordColl[0].triggerType != null">
        trigger_type,
      </if>
      <if test="recordColl[0].isDel != null">
        is_del,
      </if>
      <if test="recordColl[0].sort != null">
        sort,
      </if>
      <if test="recordColl[0].createTime != null">
        create_time,
      </if>
      <if test="recordColl[0].cronyGroupSelfStauts != null">
        crony_group_self_stauts,
      </if>
      <if test="recordColl[0].replyType != null">
        reply_type,
      </if>
      <if test="recordColl[0].replyContent != null">
        reply_content,
      </if>
      <if test="recordColl[0].replyStatus != null">
        reply_status,
      </if>
    </trim>
     ) values 
    <foreach collection="recordColl" item="record" separator=",">
      (
      <trim suffixOverrides=",">
        <if test="record.configId != null">
           #{record.configId,jdbcType=INTEGER}, 
        </if>
        <if test="record.userId != null">
           #{record.userId,jdbcType=INTEGER}, 
        </if>
        <if test="record.exriseUserType != null">
           #{record.exriseUserType,jdbcType=INTEGER}, 
        </if>
        <if test="record.exriseUserIds != null">
           #{record.exriseUserIds,jdbcType=VARCHAR}, 
        </if>
        <if test="record.cronyStauts != null">
           #{record.cronyStauts,jdbcType=INTEGER}, 
        </if>
        <if test="record.groupStatus != null">
           #{record.groupStatus,jdbcType=INTEGER}, 
        </if>
        <if test="record.replyFrequency != null">
           #{record.replyFrequency,jdbcType=INTEGER}, 
        </if>
        <if test="record.keywordsStatus != null">
           #{record.keywordsStatus,jdbcType=INTEGER}, 
        </if>
        <if test="record.eqKeywords != null">
           #{record.eqKeywords,jdbcType=VARCHAR}, 
        </if>
        <if test="record.keywords != null">
           #{record.keywords,jdbcType=VARCHAR}, 
        </if>
        <if test="record.triggerType != null">
           #{record.triggerType,jdbcType=VARCHAR}, 
        </if>
        <if test="record.isDel != null">
           #{record.isDel,jdbcType=INTEGER}, 
        </if>
        <if test="record.sort != null">
           #{record.sort,jdbcType=INTEGER}, 
        </if>
        <if test="record.createTime != null">
           #{record.createTime,jdbcType=VARCHAR}, 
        </if>
        <if test="record.cronyGroupSelfStauts != null">
           #{record.cronyGroupSelfStauts,jdbcType=INTEGER}, 
        </if>
        <if test="record.replyType != null">
           #{record.replyType,jdbcType=INTEGER}, 
        </if>
        <if test="record.replyContent != null">
           #{record.replyContent,jdbcType=VARCHAR}, 
        </if>
        <if test="record.replyStatus != null">
           #{record.replyStatus,jdbcType=INTEGER}, 
        </if>
      </trim>
      )
    </foreach>
  </insert>
  <select id="selectByExampleForOne" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from reply_config
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
</mapper>