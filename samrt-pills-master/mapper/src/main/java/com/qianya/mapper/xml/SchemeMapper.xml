<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qianya.mapper.SchemeMapper">
  <resultMap id="BaseResultMap" type="com.qianya.entity.Scheme">
    <id column="scheme_id" jdbcType="INTEGER" property="schemeId" />
    <result column="scheme_name" jdbcType="VARCHAR" property="schemeName" />
    <result column="sex" jdbcType="INTEGER" property="sex" />
    <result column="check_nick_name" jdbcType="VARCHAR" property="checkNickName" />
    <result column="check_verify" jdbcType="VARCHAR" property="checkVerify" />
    <result column="remarks" jdbcType="VARCHAR" property="remarks" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="create_time" jdbcType="VARCHAR" property="createTime" />
    <result column="is_delete" jdbcType="INTEGER" property="isDelete" />
    <result column="save_type" jdbcType="INTEGER" property="saveType" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    scheme_id, scheme_name, sex, check_nick_name, check_verify, remarks, status, user_id, 
    create_time, is_delete, save_type
  </sql>
  <select id="selectByExample" parameterType="com.qianya.entity.SchemeCriteria" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from scheme
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limitStart != null and limitStart >= 0">
      limit #{limitStart} , #{limitEnd}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from scheme
    where scheme_id = #{schemeId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from scheme
    where scheme_id = #{schemeId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.qianya.entity.SchemeCriteria">
    delete from scheme
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.qianya.entity.Scheme">
    insert into scheme (scheme_id, scheme_name, sex, 
      check_nick_name, check_verify, remarks, 
      status, user_id, create_time, 
      is_delete, save_type)
    values (#{schemeId,jdbcType=INTEGER}, #{schemeName,jdbcType=VARCHAR}, #{sex,jdbcType=INTEGER}, 
      #{checkNickName,jdbcType=VARCHAR}, #{checkVerify,jdbcType=VARCHAR}, #{remarks,jdbcType=VARCHAR}, 
      #{status,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{createTime,jdbcType=VARCHAR}, 
      #{isDelete,jdbcType=INTEGER}, #{saveType,jdbcType=INTEGER})
    <selectKey keyProperty="schemeId" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
  </insert>
  <insert id="insertSelective" parameterType="com.qianya.entity.Scheme">
    insert into scheme
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="schemeId != null">
        scheme_id,
      </if>
      <if test="schemeName != null">
        scheme_name,
      </if>
      <if test="sex != null">
        sex,
      </if>
      <if test="checkNickName != null">
        check_nick_name,
      </if>
      <if test="checkVerify != null">
        check_verify,
      </if>
      <if test="remarks != null">
        remarks,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="isDelete != null">
        is_delete,
      </if>
      <if test="saveType != null">
        save_type,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="schemeId != null">
        #{schemeId,jdbcType=INTEGER},
      </if>
      <if test="schemeName != null">
        #{schemeName,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        #{sex,jdbcType=INTEGER},
      </if>
      <if test="checkNickName != null">
        #{checkNickName,jdbcType=VARCHAR},
      </if>
      <if test="checkVerify != null">
        #{checkVerify,jdbcType=VARCHAR},
      </if>
      <if test="remarks != null">
        #{remarks,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=VARCHAR},
      </if>
      <if test="isDelete != null">
        #{isDelete,jdbcType=INTEGER},
      </if>
      <if test="saveType != null">
        #{saveType,jdbcType=INTEGER},
      </if>
    </trim>
    <selectKey keyProperty="schemeId" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
  </insert>
  <select id="countByExample" parameterType="com.qianya.entity.SchemeCriteria" resultType="java.lang.Long">
    select count(*) from scheme
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update scheme
    <set>
      <if test="record.schemeId != null">
        scheme_id = #{record.schemeId,jdbcType=INTEGER},
      </if>
      <if test="record.schemeName != null">
        scheme_name = #{record.schemeName,jdbcType=VARCHAR},
      </if>
      <if test="record.sex != null">
        sex = #{record.sex,jdbcType=INTEGER},
      </if>
      <if test="record.checkNickName != null">
        check_nick_name = #{record.checkNickName,jdbcType=VARCHAR},
      </if>
      <if test="record.checkVerify != null">
        check_verify = #{record.checkVerify,jdbcType=VARCHAR},
      </if>
      <if test="record.remarks != null">
        remarks = #{record.remarks,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=VARCHAR},
      </if>
      <if test="record.isDelete != null">
        is_delete = #{record.isDelete,jdbcType=INTEGER},
      </if>
      <if test="record.saveType != null">
        save_type = #{record.saveType,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update scheme
    set scheme_id = #{record.schemeId,jdbcType=INTEGER},
      scheme_name = #{record.schemeName,jdbcType=VARCHAR},
      sex = #{record.sex,jdbcType=INTEGER},
      check_nick_name = #{record.checkNickName,jdbcType=VARCHAR},
      check_verify = #{record.checkVerify,jdbcType=VARCHAR},
      remarks = #{record.remarks,jdbcType=VARCHAR},
      status = #{record.status,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=VARCHAR},
      is_delete = #{record.isDelete,jdbcType=INTEGER},
      save_type = #{record.saveType,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.qianya.entity.Scheme">
    update scheme
    <set>
      <if test="schemeName != null">
        scheme_name = #{schemeName,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        sex = #{sex,jdbcType=INTEGER},
      </if>
      <if test="checkNickName != null">
        check_nick_name = #{checkNickName,jdbcType=VARCHAR},
      </if>
      <if test="checkVerify != null">
        check_verify = #{checkVerify,jdbcType=VARCHAR},
      </if>
      <if test="remarks != null">
        remarks = #{remarks,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=VARCHAR},
      </if>
      <if test="isDelete != null">
        is_delete = #{isDelete,jdbcType=INTEGER},
      </if>
      <if test="saveType != null">
        save_type = #{saveType,jdbcType=INTEGER},
      </if>
    </set>
    where scheme_id = #{schemeId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.qianya.entity.Scheme">
    update scheme
    set scheme_name = #{schemeName,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=INTEGER},
      check_nick_name = #{checkNickName,jdbcType=VARCHAR},
      check_verify = #{checkVerify,jdbcType=VARCHAR},
      remarks = #{remarks,jdbcType=VARCHAR},
      status = #{status,jdbcType=INTEGER},
      user_id = #{userId,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=VARCHAR},
      is_delete = #{isDelete,jdbcType=INTEGER},
      save_type = #{saveType,jdbcType=INTEGER}
    where scheme_id = #{schemeId,jdbcType=INTEGER}
  </update>
  <insert id="insertBatch">
    insert into scheme ( 
    scheme_id,
    scheme_name,
    sex,
    check_nick_name,
    check_verify,
    remarks,
    status,
    user_id,
    create_time,
    is_delete,
    save_type
     ) values 
    <foreach collection="recordColl" item="record" separator=",">
      (
      <trim suffixOverrides=",">
         #{record.schemeId,jdbcType=INTEGER}, 
         #{record.schemeName,jdbcType=VARCHAR}, 
         #{record.sex,jdbcType=INTEGER}, 
         #{record.checkNickName,jdbcType=VARCHAR}, 
         #{record.checkVerify,jdbcType=VARCHAR}, 
         #{record.remarks,jdbcType=VARCHAR}, 
         #{record.status,jdbcType=INTEGER}, 
         #{record.userId,jdbcType=INTEGER}, 
         #{record.createTime,jdbcType=VARCHAR}, 
         #{record.isDelete,jdbcType=INTEGER}, 
         #{record.saveType,jdbcType=INTEGER}, 
      </trim>
      )
    </foreach>
  </insert>
  <insert id="insertBatchSel">
    insert into scheme ( 
    <trim suffixOverrides=",">
      <if test="recordColl[0].schemeId != null">
        scheme_id,
      </if>
      <if test="recordColl[0].schemeName != null">
        scheme_name,
      </if>
      <if test="recordColl[0].sex != null">
        sex,
      </if>
      <if test="recordColl[0].checkNickName != null">
        check_nick_name,
      </if>
      <if test="recordColl[0].checkVerify != null">
        check_verify,
      </if>
      <if test="recordColl[0].remarks != null">
        remarks,
      </if>
      <if test="recordColl[0].status != null">
        status,
      </if>
      <if test="recordColl[0].userId != null">
        user_id,
      </if>
      <if test="recordColl[0].createTime != null">
        create_time,
      </if>
      <if test="recordColl[0].isDelete != null">
        is_delete,
      </if>
      <if test="recordColl[0].saveType != null">
        save_type,
      </if>
    </trim>
     ) values 
    <foreach collection="recordColl" item="record" separator=",">
      (
      <trim suffixOverrides=",">
        <if test="record.schemeId != null">
           #{record.schemeId,jdbcType=INTEGER}, 
        </if>
        <if test="record.schemeName != null">
           #{record.schemeName,jdbcType=VARCHAR}, 
        </if>
        <if test="record.sex != null">
           #{record.sex,jdbcType=INTEGER}, 
        </if>
        <if test="record.checkNickName != null">
           #{record.checkNickName,jdbcType=VARCHAR}, 
        </if>
        <if test="record.checkVerify != null">
           #{record.checkVerify,jdbcType=VARCHAR}, 
        </if>
        <if test="record.remarks != null">
           #{record.remarks,jdbcType=VARCHAR}, 
        </if>
        <if test="record.status != null">
           #{record.status,jdbcType=INTEGER}, 
        </if>
        <if test="record.userId != null">
           #{record.userId,jdbcType=INTEGER}, 
        </if>
        <if test="record.createTime != null">
           #{record.createTime,jdbcType=VARCHAR}, 
        </if>
        <if test="record.isDelete != null">
           #{record.isDelete,jdbcType=INTEGER}, 
        </if>
        <if test="record.saveType != null">
           #{record.saveType,jdbcType=INTEGER}, 
        </if>
      </trim>
      )
    </foreach>
  </insert>
  <select id="selectByExampleForOne" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from scheme
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
</mapper>